name: Cypress e2e integration tests workflow with security
on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "*"
env:
  OS_BRANCH: "3.3"
  SECURITY_ENABLED: "true"
  VERSION: "3.3.0"
jobs:
  tests:
    name: Run Cypress E2E tests for WLM
    runs-on: ubuntu-latest
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm
      # make Node run in ipv4 first so that cypress can detect 5601 port in CI environment
      NODE_OPTIONS: '--max-old-space-size=6144 --dns-result-order=ipv4first'
      # 2.12 onwards security demo configuration require a custom admin password
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: 'myStrongPassword123!'
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 21
      - name: Checkout cypress-test
        uses: actions/checkout@v2
        with:
          repository: ${{github.repository}}
          path: cypress-test
      - name: Get package version
        working-directory: cypress-test
        run: |
          echo "VERSION=$(yarn --silent pkg-version)" >> $GITHUB_ENV
      - name: Get security setups
        run: |
          if [ "$SECURITY_ENABLED" != 'false' ]; then
              echo "SECURITY_ENABLED=true" >> $GITHUB_ENV
          else
              echo "SECURITY_ENABLED=false" >> $GITHUB_ENV
          fi
      - name: Get OpenSearch tarball
        run: |
          wget https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/${{ env.VERSION }}/latest/linux/x64/tar/dist/opensearch/opensearch-${{ env.VERSION }}-linux-x64.tar.gz
          tar -xzf opensearch-${{ env.VERSION }}-linux-x64.tar.gz

      - name: Checkout OpenSearch
        uses: actions/checkout@v4
        with:
          path: OpenSearch
          repository: opensearch-project/OpenSearch
          ref: ${{ env.OS_BRANCH }}

      - name: Build WLM plugin from OpenSearch monorepo
        run: |
          set -e
          echo "Using OpenSearch branch: $OS_BRANCH"
          cd OpenSearch

          # Build ONLY the workload-management plugin
          ./gradlew :plugins:workload-management:clean :plugins:workload-management:assemble \
            -Dopensearch.version=${{ env.VERSION }} --no-daemon

          # Expose the built ZIP path
          echo "PLUGIN_ZIP=$(ls plugins/workload-management/build/distributions/workload-management-*.zip | head -n1)" >> $GITHUB_ENV

      - name: Install WLM plugin (from ZIP)
        run: |
          set -e
          cd opensearch-${{ env.VERSION }}
          ./bin/opensearch-plugin install --batch "file:${PLUGIN_ZIP}"

      - name: Run OpenSearch (now with WLM installed)
        run: |
          set -e
          cd opensearch-${{ env.VERSION }}/
          if [ "$SECURITY_ENABLED" = 'false' ]; then
            echo "Remove OpenSearch Security"
            [ -d "plugins/opensearch-security" ] && echo "plugins.security.disabled: true" >> config/opensearch.yml
            ./opensearch-tar-install.sh &
            timeout 900 bash -c 'while [[ "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9200)" != "200" ]]; do sleep 5; done'
            curl -s http://localhost:9200
          else
            echo "Keep OpenSearch Security"
            ./opensearch-tar-install.sh &
            timeout 900 bash -c 'while [[ "$(curl -s -o /dev/null -w "%{http_code}" -u admin:${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }} -k https://localhost:9200)" != "200" ]]; do sleep 5; done'
            curl -sk -u admin:${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }} https://localhost:9200
          fi


      - name: Enable WLM (with or without Security) and verify
        run: |
          set -e
          echo "Enabling Workload Management (WLM)..."

          # Detect whether security is enabled
          if [ "$SECURITY_ENABLED" = 'true' ]; then
            echo "Security detected — using HTTPS with credentials"
            PROTOCOL=https
            AUTH="-u admin:${OPENSEARCH_INITIAL_ADMIN_PASSWORD}"
            CURL_FLAGS="--insecure --fail-with-body"
          else
            echo "No security detected — using HTTP without credentials"
            PROTOCOL=http
            AUTH=""
            CURL_FLAGS="--fail-with-body"
          fi

          # Enable WLM
          curl -sS -k --http1.1 $CURL_FLAGS $AUTH \
            -X PUT "${PROTOCOL}://localhost:9200/_cluster/settings" \
            -H 'Content-Type: application/json' \
            -d '{"persistent":{"wlm.workload_group.mode":"enabled"}}'

          # Show WLM mode
          SETTINGS=$(curl -sS -k --http1.1 -u "admin:${OPENSEARCH_INITIAL_ADMIN_PASSWORD}" "https://localhost:9200/_cluster/settings")
          echo "Raw settings response: $SETTINGS"
          echo "$SETTINGS" | jq -r '.persistent.wlm.workload_group.mode // "undefined"'

          # Test WLM stats endpoint
          echo -e "Testing WLM stats endpoint:"
          curl -ksu "admin:${OPENSEARCH_INITIAL_ADMIN_PASSWORD}" https://localhost:9200/_wlm/workload_group | jq '.'

      - name: Get OpenSearch-Dashboards
        run: |
          wget https://ci.opensearch.org/ci/dbc/distribution-build-opensearch-dashboards/${{ env.VERSION }}/latest/linux/x64/tar/dist/opensearch-dashboards/opensearch-dashboards-${{ env.VERSION }}-linux-x64.tar.gz
          tar -xzf opensearch-dashboards-${{ env.VERSION }}-linux-x64.tar.gz
      - name: Get node and yarn versions
        id: versions
        run: |
          node_version_temp=$(node -p "(require('./opensearch-dashboards-${{ env.VERSION }}/package.json').engines.node).match(/[.0-9]+/)[0]")
          echo "node_version=$node_version_temp" >> $GITHUB_ENV
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.versions.outputs.node_version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Run OpenSearch-Dashboards server
        run: |
          cd opensearch-dashboards-${{ env.VERSION }}
          if [ "$SECURITY_ENABLED" = 'false' ]; then
              echo "Remove Dashboards Security"
              ./bin/opensearch-dashboards-plugin remove securityDashboards
              sed -i /^opensearch_security/d config/opensearch_dashboards.yml
              sed -i 's/https/http/' config/opensearch_dashboards.yml
              bin/opensearch-dashboards serve &
              timeout 300 bash -c 'while [[ "$(curl http://localhost:5601/api/status | jq -r '.status.overall.state')" != "green" ]]; do sleep 5; done'
              curl http://localhost:5601/api/status
          else
              echo "Keep Dashboards Security"
              bin/opensearch-dashboards serve &
              timeout 300 bash -c 'while [[ "$(curl -u admin:${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }} -k http://localhost:5601/api/status | jq -r '.status.overall.state')" != "green" ]]; do sleep 5; done'
              curl http://localhost:5601/api/status -u admin:${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }} --insecure
          fi

      - name: Wait for OpenSearch-Dashboards to be ready
        run: |
          echo "Waiting for OpenSearch-Dashboards to start..."
          max_attempts=180
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5601/api/status || true)
            if [ "$code" = "200" ]; then
              state=$(curl -s http://localhost:5601/api/status | jq -r '.status.overall.state // .status.overall.level // "unknown"')
              echo "OpenSearch-Dashboards is ready (state=$state)"
              break
            fi
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts: /api/status -> $code; waiting 10s..."
            if [ $((attempt % 10)) -eq 0 ]; then
              echo "=== tail dashboards.log ==="
              tail -n 120 OpenSearch-Dashboards/dashboards.log || true
              echo "=== tail $LOCAL_DISTRO/os.log ==="
              tail -n 200 OpenSearch/$LOCAL_DISTRO/os.log || true
              echo "==========================="
            fi
            sleep 10
          done
          [ $attempt -lt $max_attempts ] || { echo "Timeout waiting for Dashboards"; tail -n 200 OpenSearch-Dashboards/dashboards.log || true; exit 1; }

      - name: Verify services are running
        run: |
          echo "Checking OpenSearch status..."
          curl -ksu admin:myStrongPassword123! https://localhost:9200/_cluster/health | jq '.' || echo "OpenSearch not responding"

          echo "Checking OpenSearch-Dashboards status..."
          echo "=== Full OpenSearch-Dashboards Status ==="
          curl -s http://localhost:5601/api/status || echo "OpenSearch-Dashboards not responding"
          echo "========================================"

          echo "Checking OpenSearch-Dashboards overall state..."
          curl -s http://localhost:5601/api/status | jq '.status.overall.state' || echo "Could not extract overall state"

          echo "Checking plugin endpoint..."
          curl -s http://localhost:5601/app/query-insights-dashboards || echo "Plugin endpoint not accessible"
        shell: bash
        continue-on-error: true

      - name: Install Cypress
        run: |
          cd OpenSearch-Dashboards/plugins/query-insights-dashboards
          npx cypress install
        shell: bash

      - name: Get Cypress version
        id: cypress_version
        run: |
          cd OpenSearch-Dashboards/plugins/query-insights-dashboards
          echo "::set-output name=cypress_version::$(cat ./package.json | jq '.dependencies.cypress' | tr -d '"')"

      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v4
        with:
          path: ${{ matrix.cypress_cache_folder }}
          key: cypress-cache-v2-${{ matrix.os }}-${{ hashFiles('OpenSearch-Dashboards/plugins/query-insights-dashboards/package.json') }}

      - name: Cypress tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: OpenSearch-Dashboards/plugins/query-insights-dashboards
          command: >
            yarn run cypress run
            --spec "cypress/e2e/wlm/**/*.cy.{js,jsx,ts,tsx}"
            --config defaultCommandTimeout=120000,requestTimeout=120000,responseTimeout=120000,pageLoadTimeout=180000,taskTimeout=120000,execTimeout=120000
          wait-on: 'http://localhost:5601'
          wait-on-timeout: 1200
          browser: chrome
        env:
          CYPRESS_CACHE_FOLDER: ${{ matrix.cypress_cache_folder }}
          CI: true
        timeout-minutes: 120

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.os }}
          path: OpenSearch-Dashboards/plugins/query-insights-dashboards/cypress/screenshots

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.os }}
          path: OpenSearch-Dashboards/plugins/query-insights-dashboards/cypress/videos
