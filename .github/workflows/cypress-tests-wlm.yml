name: Cypress e2e integration tests workflow with security
on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "*"

env:
  OPENSEARCH_BRANCH: 'main'
  SECURITY_BRANCH: 'main'
  OPENSEARCH_DASHBOARDS_VERSION: 'main'
  OPENSEARCH_INITIAL_ADMIN_PASSWORD: 'myStrongPassword123!'
  GRADLE_VERSION: '7.6.1'
  CYPRESS_VIDEO: true
  CYPRESS_SCREENSHOT_ON_RUN_FAILURE: true

jobs:
  tests:
    name: Run Cypress E2E tests
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            cypress_cache_folder: ~/.cache/Cypress
    runs-on: ${{ matrix.os }}
    env:
      CI: 1
      TERM: xterm
    steps:

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Checkout OpenSearch
        uses: actions/checkout@v4
        with:
          repository: opensearch-project/OpenSearch
          path: OpenSearch
          ref: ${{ env.OPENSEARCH_BRANCH }}

      - name: Build WLM, publish Rule Framework to mavenLocal, and build localDistro
        run: |
          set -e
          cd OpenSearch
          ./gradlew --no-daemon :plugins:workload-management:assemble
          ./gradlew --no-daemon :modules:autotagging-commons:common:publishToMavenLocal
          ./gradlew --no-daemon :modules:autotagging-commons:spi:publishToMavenLocal
          ./gradlew --no-daemon :modules:autotagging-commons:publishToMavenLocal
          ./gradlew --no-daemon publishToMavenLocal
          ./gradlew --no-daemon localDistro

          # capture artifacts and localDistro path
          echo "WLM_ZIP=$(ls plugins/workload-management/build/distributions/*.zip | head -n1)" >> $GITHUB_ENV
          echo "LOCAL_DISTRO=$(ls -d build/distribution/local/opensearch-*/ | head -n1 | sed 's:/*$::')" >> $GITHUB_ENV

          echo "Local distro: $LOCAL_DISTRO"
          echo "WLM zip: $WLM_ZIP"

      - name: Checkout Security
        uses: actions/checkout@v4
        with:
          repository: opensearch-project/security
          path: security
          ref: ${{ env.SECURITY_BRANCH }}

      - name: Build Security plugin
        run: |
          set -e
          cd security
          ./gradlew --no-daemon assemble
          echo "SEC_ZIP=$(ls build/distributions/opensearch-security-*.zip | head -n1)" >> $GITHUB_ENV
          echo "Security zip: $SEC_ZIP"

      - name: Install plugins into localDistro
        run: |
          set -e
          cd "${{ env.LOCAL_DISTRO }}"
          bin/opensearch-plugin install --batch "file://$GITHUB_WORKSPACE/${{ env.SEC_ZIP }}"
          bin/opensearch-plugin install --batch "file://$GITHUB_WORKSPACE/${{ env.WLM_ZIP }}"

          echo "Installed plugins:"
          bin/opensearch-plugin list || true

      - name: Initialize Security demo configuration
        run: |
          set -e
          cd "${{ env.LOCAL_DISTRO }}/plugins/opensearch-security/tools"
          chmod +x install_demo_configuration.sh
          export OPENSEARCH_INITIAL_ADMIN_PASSWORD="${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}"
          ./install_demo_configuration.sh -y -i   # answers 'y' to prompts, installs certs, sets admin user

      - name: Run OpenSearch and enable WLM
        run: |
          set -e
          cd "${{ env.LOCAL_DISTRO }}"
          echo "discovery.type: single-node" >> config/opensearch.yml

          nohup bin/opensearch -Ehttp.port=9200 -Ehttp.host=0.0.0.0 > os.log 2>&1 &
          echo "Waiting for OpenSearch to start..."
          for i in {1..60}; do
            if curl -ksu admin:"${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}" https://localhost:9200/_cluster/health >/dev/null 2>&1; then
              echo "OpenSearch is up"; break
            fi
            echo "Attempt $i/60..."; sleep 5
          done

          echo "Plugins:"
          curl -ksu admin:"${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}" https://localhost:9200/_cat/plugins?v || true

          echo "Enable WLM:"
          curl -kXu PUT -u admin:"${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}" "https://localhost:9200/_cluster/settings" \
            -H 'Content-Type: application/json' \
            -d '{"persistent":{"wlm.workload_group.mode":"enabled"}}'

          echo "Show WLM mode:"
          curl -ksu admin:"${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}" https://localhost:9200/_cluster/settings | jq -r '.persistent.wlm.workload_group.mode // "undefined"'

      - name: Checkout OpenSearch-Dashboards
        uses: actions/checkout@v4
        with:
          repository: opensearch-project/OpenSearch-Dashboards
          path: OpenSearch-Dashboards
          ref: ${{ env.OPENSEARCH_DASHBOARDS_VERSION }}

      - name: Configure OpenSearch Dashboards for cypress
        run: |
          cat << 'EOT' > cypress-opensearch-dashboards-config.yml
          opensearch.hosts: ["https://localhost:9200"]
          opensearch.ssl.verificationMode: none
          EOT

      - name: Checkout Query Insights Dashboards plugin
        uses: actions/checkout@v4
        with:
          path: OpenSearch-Dashboards/plugins/query-insights-dashboards

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: './OpenSearch-Dashboards/.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Yarn
        shell: bash
        run: |
          YARN_VERSION=$(node -p "require('./OpenSearch-Dashboards/package.json').engines.yarn")
          echo "Installing yarn@$YARN_VERSION"
          npm i -g yarn@$YARN_VERSION
      - run: node -v
      - run: yarn -v

      - name: Bootstrap plugin/OpenSearch-Dashboards
        run: |
          cd OpenSearch-Dashboards/plugins/query-insights-dashboards
          yarn osd bootstrap --single-version=loose

      - name: Run OpenSearch-Dashboards server
        run: |
          cd OpenSearch-Dashboards
          export NODE_OPTIONS="--max-old-space-size=6144 --dns-result-order=ipv4first"
          echo "Starting Dashboards..."
          nohup yarn start --no-base-path --no-watch --server.host="0.0.0.0" > dashboards.log 2>&1 &
          sleep 10
          echo "Initial Dashboards log output:"
          head -n 100 dashboards.log || true
        shell: bash

      - name: Wait for OpenSearch-Dashboards to be ready
        run: |
          echo "Waiting for OpenSearch-Dashboards to start..."
          max_attempts=150
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -ksf -u admin:myStrongPassword123! https://localhost:5601/api/status > /dev/null 2>&1; then
              echo "OpenSearch-Dashboards is ready!"
              echo "=== OpenSearch-Dashboards Status Debug Info ==="
              curl -ks -u admin:myStrongPassword123! https://localhost:5601/api/status | jq '.' || curl -ks -u admin:myStrongPassword123! https://localhost:5601/api/status
              sleep 45
              break
            fi
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts: OpenSearch-Dashboards not ready yet, waiting 10 seconds..."
            if [ $((attempt % 10)) -eq 0 ]; then
              echo "Debug: Attempting to connect to https://localhost:5601/api/status"
              curl -ks -v -u admin:myStrongPassword123! https://localhost:5601/api/status || echo "Connection failed"
            fi
            sleep 10
          done
          if [ $attempt -eq $max_attempts ]; then
            echo "OpenSearch-Dashboards failed to start within timeout"
            curl -ks -v -u admin:myStrongPassword123! https://localhost:5601/api/status || echo "Final connection attempt failed"
            exit 1
          fi
          curl -ks -u admin:myStrongPassword123! https://localhost:5601/api/status || (echo "OpenSearch-Dashboards health check failed" && exit 1)
          echo "Waiting additional time for plugin initialization..."
          sleep 15
        shell: bash

      - name: Verify services are running
        run: |
          echo "Checking OpenSearch status..."
          curl -ksu admin:myStrongPassword123! https://localhost:9200/_cluster/health | jq '.' || echo "OpenSearch not responding"

          echo "Checking OpenSearch-Dashboards status..."
          echo "=== Full OpenSearch-Dashboards Status ==="
          curl -ks -u admin:myStrongPassword123! https://localhost:5601/api/status || echo "OpenSearch-Dashboards not responding"
          echo "========================================"

          echo "Checking OpenSearch-Dashboards overall state..."
          curl -ks -u admin:myStrongPassword123! https://localhost:5601/api/status | jq '.status.overall.state' || echo "Could not extract overall state"

          echo "Checking plugin endpoint..."
          curl -ks -u admin:myStrongPassword123! https://localhost:5601/app/query-insights-dashboards || echo "Plugin endpoint not accessible"
        shell: bash
        continue-on-error: true

      - name: Install Cypress
        run: |
          cd OpenSearch-Dashboards/plugins/query-insights-dashboards
          npx cypress install
        shell: bash

      - name: Get Cypress version
        id: cypress_version
        run: |
          cd OpenSearch-Dashboards/plugins/query-insights-dashboards
          echo "::set-output name=cypress_version::$(cat ./package.json | jq '.dependencies.cypress' | tr -d '"')"

      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v4
        with:
          path: ${{ matrix.cypress_cache_folder }}
          key: cypress-cache-v2-${{ matrix.os }}-${{ hashFiles('OpenSearch-Dashboards/plugins/query-insights-dashboards/package.json') }}

      # ⬇️ Only run WLM specs
      - name: Cypress tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: OpenSearch-Dashboards/plugins/query-insights-dashboards
          command: >
            yarn run cypress run
            --spec "cypress/e2e/wlm/**/*.cy.{js,jsx,ts,tsx}"
            --config defaultCommandTimeout=120000,requestTimeout=120000,responseTimeout=120000,pageLoadTimeout=180000,taskTimeout=120000,execTimeout=120000
          wait-on: 'https://localhost:5601'
          wait-on-timeout: 1200
          browser: chrome
        env:
          CYPRESS_CACHE_FOLDER: ${{ matrix.cypress_cache_folder }}
          CI: true
        timeout-minutes: 120

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.os }}
          path: OpenSearch-Dashboards/plugins/query-insights-dashboards/cypress/screenshots

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.os }}
          path: OpenSearch-Dashboards/plugins/query-insights-dashboards/cypress/videos
